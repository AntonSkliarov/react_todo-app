{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/Filters/Filters.js","components/AddTodoForm/AddTodoForm.js","App.js","custom_hooks/useLocalStorage.js","index.js"],"names":["TodoItem","todo","changeStatus","deleteTodo","updateTodoItem","useState","editingId","setEditingId","title","newTitle","setNewTitle","useEffect","className","classNames","completed","editing","id","onDoubleClick","type","value","onChange","event","target","checked","onClick","onKeyDown","eventKey","key","todoId","length","onBlur","TodoList","todos","toggleAll","map","Filters","setFilterStatus","filterStatus","activeSelectAll","selected","AddTodoForm","onSubmit","addTitle","placeholder","App","setTitle","initialValue","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","useLocalStorage","setTodos","filteredTodos","setfilteredTodos","setActiveSelectAll","allCompleted","setAllCompleted","status","uncheckedTodos","every","filter","filteredList","some","clearAllCompleted","useCallback","todosCopy","preventDefault","newTodo","uuidv4","htmlFor","checkedTodoId","todoIdForDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86bc35ae.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport function TodoItem({ todo, changeStatus, deleteTodo, updateTodoItem }) {\n  const [editingId, setEditingId] = useState('');\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  useEffect(() => {\n    setEditingId('');\n    setNewTitle(todo.title);\n  }, [todo]);\n\n  const updateTodoTitle = (title) => {\n    setNewTitle(title);\n  };\n\n  const titleChange = (eventKey, todoId) => {\n    if (newTitle.length === 0) {\n      return;\n    }\n\n    if (eventKey === 'Enter') {\n      updateTodoItem(todoId, newTitle);\n    }\n\n    if (eventKey === 'Escape') {\n      setEditingId('');\n      setNewTitle(todo.title);\n    }\n  };\n\n  const onBlurTitleChange = (todoId) => {\n    updateTodoItem(todoId, newTitle);\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed, editing: editingId === todo.id,\n      })}\n      onDoubleClick={() => setEditingId(todo.id)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          value={todo.id}\n          onChange={event => changeStatus(event.target.value)}\n          checked={todo.completed}\n        />\n        <label>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={event => updateTodoTitle(event.target.value)}\n        onKeyDown={event => titleChange(event.key, todo.id)}\n        onBlur={() => onBlurTitleChange(todo.id)}\n      />\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  todos,\n  changeStatus,\n  deleteTodo,\n  toggleAll,\n  updateTodoItem,\n}) => (\n  <>\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          changeStatus={changeStatus}\n          key={todo.id}\n          deleteTodo={deleteTodo}\n          updateTodoItem={updateTodoItem}\n        />\n      ))}\n    </ul>\n  </>\n);\n\nTodoList.propTypes = {\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  toggleAll: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isReuired,\n      title: PropTypes.string.isReuired,\n      completed: PropTypes.bool.isReuired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const Filters = ({ setFilterStatus, filterStatus, activeSelectAll }) => (\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        className={classNames('filter', {\n          selected: filterStatus === 'all',\n        })}\n        onClick={() => setFilterStatus('all')}\n      >\n        All\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={classNames('filter', {\n          selected: filterStatus === 'active',\n        })}\n        onClick={() => setFilterStatus('active')}\n      >\n        Active\n      </button>\n    </li>\n\n    {activeSelectAll && (\n      <li>\n        <button\n          type=\"button\"\n          className={classNames('filter', {\n            selected: filterStatus === 'completed',\n          })}\n          onClick={() => setFilterStatus('completed')}\n        >\n          Completed\n        </button>\n      </li>\n    )}\n\n  </ul>\n);\n\nFilters.propTypes = {\n  setFilterStatus: PropTypes.func.isRequired,\n  activeSelectAll: PropTypes.bool.isRequired,\n  filterStatus: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddTodoForm = ({ title, onSubmit, addTitle }) => (\n  <form onSubmit={onSubmit}>\n    <input\n      type=\"text\"\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      value={title}\n      onChange={event => addTitle(event.target.value)}\n    />\n  </form>\n);\n\nAddTodoForm.propTypes = {\n  title: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  addTitle: PropTypes.bool.isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TodoList } from './components/TodoList';\nimport { Filters } from './components/Filters';\nimport { useLocalStorage } from './custom_hooks/useLocalStorage';\nimport { AddTodoForm } from './components/AddTodoForm';\n\nfunction App() {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [filteredTodos, setfilteredTodos] = useState(todos);\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [activeSelectAll, setActiveSelectAll] = useState(false);\n  const [allCompleted, setAllCompleted] = useState(false);\n\n  const addTitle = (value) => {\n    setTitle(value);\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    if (title.length === 0) {\n      return;\n    }\n\n    const newTodo = {\n      title,\n      id: uuidv4(),\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n    setfilteredTodos([...todos, newTodo]);\n\n    setTitle('');\n  };\n\n  const toggleAll = (status) => {\n    const uncheckedTodos = todos.map(todo => (\n      {\n        ...todo,\n        completed: status,\n      }\n    ));\n\n    setAllCompleted(status);\n    setTodos(uncheckedTodos);\n    setfilteredTodos(uncheckedTodos);\n  };\n\n  useEffect(() => {\n    if (todos.every(todo => todo.completed === true)) {\n      setAllCompleted(true);\n    }\n\n    if (todos.every(todo => todo.completed === false)) {\n      setAllCompleted(false);\n    }\n  }, [todos]);\n\n  const changeStatus = (checkedTodoId) => {\n    const todosCopy = todos.map((todo) => {\n      if (todo.id === checkedTodoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(todosCopy);\n    setfilteredTodos(todosCopy);\n  };\n\n  useEffect(() => {\n    if (filterStatus === 'all') {\n      setfilteredTodos(todos);\n    } else {\n      const filter = filterStatus === 'completed';\n\n      const filteredList = todos.filter(todo => (\n        todo.completed === filter\n      ));\n\n      setfilteredTodos(filteredList);\n    }\n  }, [filterStatus, todos]);\n\n  const deleteTodo = (todoIdForDelete) => {\n    const filteredList = todos.filter(todo => (\n      todo.id !== todoIdForDelete\n    ));\n\n    setTodos(filteredList);\n    setfilteredTodos(filteredList);\n  };\n\n  useEffect(() => {\n    if (!activeSelectAll) {\n      const checkStatus = todos.some(todo => (\n        todo.completed === true\n      ));\n\n      if (checkStatus) {\n        setActiveSelectAll(true);\n      }\n    } else {\n      const checkStatus = todos.every(todo => (\n        todo.completed === false\n      ));\n\n      if (checkStatus) {\n        setActiveSelectAll(false);\n      }\n    }\n  }, [todos, activeSelectAll]);\n\n  const clearAllCompleted = useCallback(() => {\n    const filteredList = todos.filter(todo => (\n      todo.completed === false\n    ));\n\n    setTodos(filteredList);\n    setfilteredTodos(filteredList);\n\n    if (filterStatus === 'completed') {\n      setFilterStatus('all');\n    }\n  }, [filterStatus, setTodos, todos]);\n\n  const updateTodoItem = useCallback((todoId, newTitle) => {\n    const todosCopy = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: newTitle,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(todosCopy);\n    setfilteredTodos(todosCopy);\n  }, [setTodos, todos]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <AddTodoForm\n          addTitle={addTitle}\n          onSubmit={onSubmit}\n          title={title}\n        />\n      </header>\n      {!!todos.length && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={allCompleted}\n              onChange={event => toggleAll(event.target.checked)}\n            />\n            <label\n              htmlFor=\"toggle-all\"\n              title=\"Mark all as completed/not completed\"\n            >\n              Mark all as completed/not completed\n            </label>\n\n            <TodoList\n              todos={filteredTodos}\n              changeStatus={changeStatus}\n              deleteTodo={deleteTodo}\n              toggleAll={toggleAll}\n              updateTodoItem={updateTodoItem}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            {filteredTodos.length !== 0 && (\n              <span className=\"todo-count\">\n                {`${filteredTodos.length} item(s) left`}\n              </span>\n            )}\n\n            <Filters\n              setFilterStatus={setFilterStatus}\n              filterStatus={filterStatus}\n              activeSelectAll={activeSelectAll}\n            />\n\n            {activeSelectAll && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearAllCompleted}\n              >\n                Clear completed tasks\n              </button>\n            )}\n\n          </footer>\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key)) || initialValue,\n  );\n  const save = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}