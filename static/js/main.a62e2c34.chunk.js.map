{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","custom_hooks/useLocalStorage.js","components/AddTodoForm/AddTodoForm.js","js/filtersNames.js","components/Filters/Filters.js","components/Footer/Footer.js","App.js","index.js"],"names":["TodoItem","todo","changeStatus","deleteTodo","updateTodoItem","editingTodoId","setEditingTodoId","useState","title","newTitle","setNewTitle","useEffect","className","classNames","completed","editing","id","onDoubleClick","type","value","onChange","event","target","handleChange","checked","onClick","onKeyDown","eventKey","todoId","trim","length","handleKeyDown","key","onBlur","TodoList","todos","map","AddTodoForm","setTodos","setTitle","onSubmit","preventDefault","newTodo","uuidv4","placeholder","FILTERS","Filters","setFilterStatus","filterStatus","haveCompletedTodos","href","selected","Footer","completedTodosQty","clearAllCompleted","App","initialValue","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","useLocalStorage","allCompleted","setAllCompleted","toggleAll","status","changedStatusTodos","useCallback","filteredList","filter","todosCopy","completedTodos","useMemo","filteredTodos","htmlFor","checkedTodoId","todoIdForDelete","ReactDOM","render","document","getElementById"],"mappings":"qTAIO,SAASA,EAAT,GAOH,IANFC,EAMC,EANDA,KACAC,EAKC,EALDA,aACAC,EAIC,EAJDA,WACAC,EAGC,EAHDA,eACAC,EAEC,EAFDA,cACAC,EACC,EADDA,iBACC,EAC+BC,mBAASN,EAAKO,OAD7C,mBACMC,EADN,KACgBC,EADhB,KAGDC,qBAAU,WACRD,EAAYT,EAAKO,SAChB,IAsCH,OACE,wBACEI,UAAWC,IAAW,CACpBC,UAAWb,EAAKa,UAChBC,QAASV,IAAkBJ,EAAKe,KAElCC,cAAe,kBAAMX,EAAiBL,EAAKe,MAE3C,yBAAKJ,UAAU,QACb,2BACEM,KAAK,WACLN,UAAU,SACVO,MAAOlB,EAAKe,GACZI,SAAU,SAAAC,GAAK,OA1BF,SAACA,GACpBnB,EAAamB,EAAMC,OAAOH,OAyBDI,CAAaF,IAChCG,QAASvB,EAAKa,YAEhB,+BACGb,EAAKO,OAER,4BACEU,KAAK,SACLN,UAAU,UACVa,QAAS,kBAAMtB,EAAWF,EAAKe,QAGnC,2BACEE,KAAK,OACLN,UAAU,OACVO,MAAOV,EACPW,SAAU,SAAAC,GAAK,OAjEIb,EAiEgBa,EAAMC,OAAOH,WAhEpDT,EAAYF,GADU,IAACA,GAkEnBkB,UAAW,SAAAL,GAAK,OA9DA,SAACM,EAAUC,GAC/B,GAA+B,IAA3BnB,EAASoB,OAAOC,OAIpB,OAAQH,GACN,IAAK,QACHrB,EAAiB,GACjBF,EAAewB,EAAQnB,GACvB,MACF,IAAK,SACHH,EAAiB,GACjBI,EAAYT,EAAKO,QAkDGuB,CAAcV,EAAMW,IAAK/B,EAAKe,KAClDiB,OAAQ,kBAxCML,EAwCW3B,EAAKe,QAvCH,IAA3BP,EAASoB,OAAOC,SAIpBxB,EAAiB,GACjBF,EAAewB,EAAQnB,KANN,IAACmB,MCzCf,SAASM,EAAT,GAKH,IAJFC,EAIC,EAJDA,MACAjC,EAGC,EAHDA,aACAC,EAEC,EAFDA,WACAC,EACC,EADDA,eACC,EACyCG,mBAAS,GADlD,mBACMF,EADN,KACqBC,EADrB,KAGD,OACE,wBAAIM,UAAU,aACXuB,EAAMC,KAAI,SAAAnC,GAAI,OACb,kBAACD,EAAD,CACEC,KAAMA,EACNC,aAAcA,EACd8B,IAAK/B,EAAKe,GACVb,WAAYA,EACZC,eAAgBA,EAChBC,cAAeA,EACfC,iBAAkBA,QCpBrB,I,eCEA,SAAS+B,EAAT,GAA2C,IAApBC,EAAmB,EAAnBA,SAAUH,EAAS,EAATA,MAAS,EACrB5B,mBAAS,IADY,mBACxCC,EADwC,KACjC+B,EADiC,KAyB/C,OACE,0BAAMC,SAnBS,SAACnB,GAGhB,GAFAA,EAAMoB,iBAEsB,IAAxBjC,EAAMqB,OAAOC,OAAjB,CAIA,IAAMY,EAAU,CACdlC,QACAQ,GAAI2B,cACJ7B,WAAW,GAGbwB,EAAS,GAAD,mBAAKH,GAAL,CAAYO,KAEpBH,EAAS,OAKP,2BACErB,KAAK,OACLN,UAAU,WACVgC,YAAY,yBACZzB,MAAOX,EACPY,SAAU,SAAAC,GAAK,OA7BHF,EA6BgBE,EAAMC,OAAOH,WA5B7CoB,EAASpB,GADM,IAACA,MCPb,IAAM0B,EACN,MADMA,EAEH,SAFGA,EAGA,YCEAC,EAAU,SAAC,GAAD,IACrBC,EADqB,EACrBA,gBACAC,EAFqB,EAErBA,aACAC,EAHqB,EAGrBA,mBAHqB,OAKrB,wBAAIrC,UAAU,WACZ,4BACE,uBACEsC,KAAK,KACLtC,UAAWC,IAAW,SAAU,CAC9BsC,SAAUH,IAAiBH,IAE7BpB,QAAS,kBAAMsB,EAAgBF,KALjC,QAWF,4BACE,uBACEK,KAAK,KACLtC,UAAWC,IAAW,SAAU,CAC9BsC,SAAUH,IAAiBH,IAE7BpB,QAAS,kBAAMsB,EAAgBF,KALjC,WAWDI,GACC,4BACE,uBACEC,KAAK,KACLtC,UAAWC,IAAW,SAAU,CAC9BsC,SAAUH,IAAiBH,IAE7BpB,QAAS,kBAAMsB,EAAgBF,KALjC,gBCjCKO,EAAS,SAAC,GAAD,IACpBC,EADoB,EACpBA,kBACAN,EAFoB,EAEpBA,gBACAC,EAHoB,EAGpBA,aACAM,EAJoB,EAIpBA,kBAJoB,OAMpB,4BAAQ1C,UAAU,YACbyC,GACD,0BAAMzC,UAAU,cAAhB,UACMyC,EADN,kBAKF,kBAAC,EAAD,CACEN,gBAAiBA,EACjBC,aAAcA,EACdC,qBAAsBI,MAGrBA,GACD,4BACEnC,KAAK,SACLN,UAAU,kBACVa,QAAS6B,GAHX,2BCmHSC,MApIf,WAAgB,IAAD,ELLgB,SAACvB,EAAKwB,GAAkB,IAAD,EAC1BjD,mBACxBkD,KAAKC,MAAMC,aAAaC,QAAQ5B,KAASwB,GAFS,mBAC7CrC,EAD6C,KACtC0C,EADsC,KASpD,MAAO,CAAC1C,EALK,SAAC2C,GACZD,EAASC,GACTH,aAAaI,QAAQ/B,EAAKyB,KAAKO,UAAUF,MKAjBG,CAAgB,QAAS,IADtC,mBACN9B,EADM,KACCG,EADD,OAE2B/B,mBAAS,OAFpC,mBAENyC,EAFM,KAEQD,EAFR,OAG2BxC,oBAAS,GAHpC,mBAGN2D,EAHM,KAGQC,EAHR,KAKPC,EAAY,SAACC,GACjB,IAAMC,EAAqBnC,EAAMC,KAAI,SAAAnC,GAAI,kCAElCA,GAFkC,IAGrCa,UAAWuD,OAIfF,EAAgBE,GAChB/B,EAASgC,IA0BLhB,EAAoBiB,uBAAY,WACpC,IAAMC,EAAerC,EAAMsC,QAAO,SAAAxE,GAAI,OAAKA,EAAKa,aAEhDwB,EAASkC,GAEY,cAAjBxB,GACFD,EAAgB,SAEjB,CAACC,EAAcV,EAAUH,IAEtB/B,EAAiBmE,uBAAY,SAAC3C,EAAQnB,GAC1C,IAAMiE,EAAYvC,EAAMC,KAAI,SAACnC,GAC3B,OAAIA,EAAKe,KAAOY,EACP,2BACF3B,GADL,IAEEO,MAAOC,IAIJR,KAGTqC,EAASoC,KACR,CAACpC,EAAUH,IAERwC,EAAiBC,mBAAQ,kBAC7BzC,EAAMsC,QAAO,SAAAxE,GAAI,OACfA,EAAKa,eAEN,CAACqB,IAEE0C,EAAgBD,mBAAQ,WAC5B,GAAqB,QAAjB5B,EACF,OAAOb,EAGT,IAAMsC,EAA0B,cAAjBzB,EAKf,OAJqBb,EAAMsC,QAAO,SAAAxE,GAAI,OACpCA,EAAKa,YAAc2D,OAIpB,CAACtC,EAAOa,IAEX,OACE,6BAASpC,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCAEA,kBAACyB,EAAD,CACEF,MAAOA,EACPG,SAAUA,OAGXH,EAAML,QACP,oCACE,6BAASlB,UAAU,QACjB,2BACEM,KAAK,WACLF,GAAG,aACHJ,UAAU,aACVY,QAAS0C,EACT9C,SAAU,SAAAC,GAAK,OAAI+C,EAAU/C,EAAMC,OAAOE,YAE5C,2BACEsD,QAAQ,aACRtE,MAAM,uCAFR,uCAOA,kBAAC0B,EAAD,CACEC,MAAO0C,EACP3E,aAhGS,SAAC6E,GACpB,IAAML,EAAYvC,EAAMC,KAAI,SAACnC,GAC3B,OAAIA,EAAKe,KAAO+D,EACP,2BACF9E,GADL,IAEEa,WAAYb,EAAKa,YAIdb,KAGTqC,EAASoC,IAqFCvE,WAlFO,SAAC6E,GAClB,IAAMR,EAAerC,EAAMsC,QAAO,SAAAxE,GAAI,OACpCA,EAAKe,KAAOgE,KAGd1C,EAASkC,IA8ECJ,UAAWA,EACXhE,eAAgBA,KAIpB,kBAAC,EAAD,CACEiD,kBAAmBsB,EAAe7C,OAClCiB,gBAAiBA,EACjBC,aAAcA,EACdM,kBAAmBA,OC1H/B2B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.a62e2c34.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport function TodoItem({\n  todo,\n  changeStatus,\n  deleteTodo,\n  updateTodoItem,\n  editingTodoId,\n  setEditingTodoId,\n}) {\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  useEffect(() => {\n    setNewTitle(todo.title);\n  }, []);\n\n  const updateTodoTitle = (title) => {\n    setNewTitle(title);\n  };\n\n  const handleKeyDown = (eventKey, todoId) => {\n    if (newTitle.trim().length === 0) {\n      return;\n    }\n\n    switch (eventKey) {\n      case 'Enter':\n        setEditingTodoId(0);\n        updateTodoItem(todoId, newTitle);\n        break;\n      case 'Escape':\n        setEditingTodoId(0);\n        setNewTitle(todo.title);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleChange = (event) => {\n    changeStatus(event.target.value);\n  };\n\n  const handleBlur = (todoId) => {\n    if (newTitle.trim().length === 0) {\n      return;\n    }\n\n    setEditingTodoId(0);\n    updateTodoItem(todoId, newTitle);\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed,\n        editing: editingTodoId === todo.id,\n      })}\n      onDoubleClick={() => setEditingTodoId(todo.id)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          value={todo.id}\n          onChange={event => handleChange(event)}\n          checked={todo.completed}\n        />\n        <label>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={event => updateTodoTitle(event.target.value)}\n        onKeyDown={event => handleKeyDown(event.key, todo.id)}\n        onBlur={() => handleBlur(todo.id)}\n      />\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  editingTodoId: PropTypes.number.isRequired,\n  setEditingTodoId: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport function TodoList({\n  todos,\n  changeStatus,\n  deleteTodo,\n  updateTodoItem,\n}) {\n  const [editingTodoId, setEditingTodoId] = useState(0);\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          changeStatus={changeStatus}\n          key={todo.id}\n          deleteTodo={deleteTodo}\n          updateTodoItem={updateTodoItem}\n          editingTodoId={editingTodoId}\n          setEditingTodoId={setEditingTodoId}\n        />\n      ))}\n    </ul>\n  );\n}\n\nTodoList.propTypes = {\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isReuired,\n      title: PropTypes.string.isReuired,\n      completed: PropTypes.bool.isReuired,\n    }).isRequired,\n  ).isRequired,\n};\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key)) || initialValue,\n  );\n  const save = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport function AddTodoForm({ setTodos, todos }) {\n  const [title, setTitle] = useState('');\n\n  const addTitle = (value) => {\n    setTitle(value);\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    if (title.trim().length === 0) {\n      return;\n    }\n\n    const newTodo = {\n      title,\n      id: uuidv4(),\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n\n    setTitle('');\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={title}\n        onChange={event => addTitle(event.target.value)}\n      />\n    </form>\n  );\n}\n\nAddTodoForm.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","export const FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FILTERS } from '../../js/filtersNames';\n\nexport const Filters = ({\n  setFilterStatus,\n  filterStatus,\n  haveCompletedTodos,\n}) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames('filter', {\n          selected: filterStatus === FILTERS.all,\n        })}\n        onClick={() => setFilterStatus(FILTERS.all)}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames('filter', {\n          selected: filterStatus === FILTERS.active,\n        })}\n        onClick={() => setFilterStatus(FILTERS.active)}\n      >\n        Active\n      </a>\n    </li>\n\n    {haveCompletedTodos && (\n      <li>\n        <a\n          href=\"#/\"\n          className={classNames('filter', {\n            selected: filterStatus === FILTERS.completed,\n          })}\n          onClick={() => setFilterStatus(FILTERS.completed)}\n        >\n          Completed\n        </a>\n      </li>\n    )}\n\n  </ul>\n);\n\nFilters.propTypes = {\n  setFilterStatus: PropTypes.func.isRequired,\n  haveCompletedTodos: PropTypes.bool.isRequired,\n  filterStatus: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Filters } from '../Filters';\n\nexport const Footer = ({\n  completedTodosQty,\n  setFilterStatus,\n  filterStatus,\n  clearAllCompleted,\n}) => (\n  <footer className=\"footer\">\n    {!!completedTodosQty && (\n      <span className=\"todo-count\">\n        {`${completedTodosQty} item(s) left`}\n      </span>\n    )}\n\n    <Filters\n      setFilterStatus={setFilterStatus}\n      filterStatus={filterStatus}\n      haveCompletedTodos={!!completedTodosQty}\n    />\n\n    {!!completedTodosQty && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearAllCompleted}\n      >\n        Clear completed tasks\n      </button>\n    )}\n\n  </footer>\n);\n\nFooter.propTypes = {\n  completedTodosQty: PropTypes.number.isRequired,\n  setFilterStatus: PropTypes.func.isRequired,\n  filterStatus: PropTypes.string.isRequired,\n  clearAllCompleted: PropTypes.func.isRequired,\n};\n","import React, { useState, useCallback, useMemo } from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { useLocalStorage } from './custom_hooks/useLocalStorage';\nimport { AddTodoForm } from './components/AddTodoForm';\nimport { Footer } from './components/Footer';\n\nfunction App() {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [allCompleted, setAllCompleted] = useState(false);\n\n  const toggleAll = (status) => {\n    const changedStatusTodos = todos.map(todo => (\n      {\n        ...todo,\n        completed: status,\n      }\n    ));\n\n    setAllCompleted(status);\n    setTodos(changedStatusTodos);\n  };\n\n  const changeStatus = (checkedTodoId) => {\n    const todosCopy = todos.map((todo) => {\n      if (todo.id === checkedTodoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(todosCopy);\n  };\n\n  const deleteTodo = (todoIdForDelete) => {\n    const filteredList = todos.filter(todo => (\n      todo.id !== todoIdForDelete\n    ));\n\n    setTodos(filteredList);\n  };\n\n  const clearAllCompleted = useCallback(() => {\n    const filteredList = todos.filter(todo => !todo.completed);\n\n    setTodos(filteredList);\n\n    if (filterStatus === 'completed') {\n      setFilterStatus('all');\n    }\n  }, [filterStatus, setTodos, todos]);\n\n  const updateTodoItem = useCallback((todoId, newTitle) => {\n    const todosCopy = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: newTitle,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(todosCopy);\n  }, [setTodos, todos]);\n\n  const completedTodos = useMemo(() => (\n    todos.filter(todo => (\n      todo.completed\n    ))\n  ), [todos]);\n\n  const filteredTodos = useMemo(() => {\n    if (filterStatus === 'all') {\n      return todos;\n    }\n\n    const filter = filterStatus === 'completed';\n    const filteredList = todos.filter(todo => (\n      todo.completed === filter\n    ));\n\n    return filteredList;\n  }, [todos, filterStatus]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <AddTodoForm\n          todos={todos}\n          setTodos={setTodos}\n        />\n      </header>\n      {!!todos.length && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={allCompleted}\n              onChange={event => toggleAll(event.target.checked)}\n            />\n            <label\n              htmlFor=\"toggle-all\"\n              title=\"Mark all as completed/not completed\"\n            >\n              Mark all as completed/not completed\n            </label>\n\n            <TodoList\n              todos={filteredTodos}\n              changeStatus={changeStatus}\n              deleteTodo={deleteTodo}\n              toggleAll={toggleAll}\n              updateTodoItem={updateTodoItem}\n            />\n          </section>\n\n          <Footer\n            completedTodosQty={completedTodos.length}\n            setFilterStatus={setFilterStatus}\n            filterStatus={filterStatus}\n            clearAllCompleted={clearAllCompleted}\n          />\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}