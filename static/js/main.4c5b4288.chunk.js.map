{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["TodoItem","todo","changeStatus","deleteTodo","updateTodoItem","useState","editingId","setEditingId","title","newTitle","setNewTitle","useEffect","className","classNames","completed","editing","id","onDoubleClick","type","value","onChange","event","target","checked","onClick","onKeyDown","eventKey","key","todoId","length","onBlur","TodoList","todos","forToggleAll","allCompleted","setAllCompleted","every","htmlFor","map","App","setTitle","setTodos","filteredTodos","setfilteredTodos","filterStatus","setFilterStatus","activeSelectAll","setActiveSelectAll","filter","filteredList","some","onSubmit","preventDefault","newTodo","Math","random","toString","substr","placeholder","checkedTodoId","checkedTodo","find","index","indexOf","todosCopy","splice","todoIdForDelete","uncheckedTodos","href","selected","fileredList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c5b4288.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport function TodoItem({ todo, changeStatus, deleteTodo, updateTodoItem }) {\n  const [editingId, setEditingId] = useState('');\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  useEffect(() => {\n    setEditingId('');\n    setNewTitle(todo.title);\n  }, [todo]);\n\n  const updateTodoTitle = (title) => {\n    setNewTitle(title);\n  };\n\n  const titleChange = (eventKey, todoId) => {\n    if (newTitle.length === 0) {\n      return;\n    }\n\n    if (eventKey === 'Enter') {\n      updateTodoItem(todoId, newTitle);\n    }\n\n    if (eventKey === 'Escape') {\n      setEditingId('');\n      setNewTitle(todo.title);\n    }\n  };\n\n  const onBlurTitleChange = (todoId) => {\n    updateTodoItem(todoId, newTitle);\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed, editing: editingId === todo.id,\n      })}\n      onDoubleClick={() => setEditingId(todo.id)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          value={todo.id}\n          onChange={event => changeStatus(event.target.value)}\n          checked={todo.completed}\n        />\n        <label>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={event => updateTodoTitle(event.target.value)}\n        onKeyDown={event => titleChange(event.key, todo.id)}\n        onBlur={() => onBlurTitleChange(todo.id)}\n      />\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport function TodoList({\n  todos,\n  changeStatus,\n  deleteTodo,\n  forToggleAll,\n  updateTodoItem,\n}) {\n  const [allCompleted, setAllCompleted] = useState(false);\n\n  useEffect(() => {\n    const completedStatusCheck = todos.every(todo => (\n      todo.completed === true\n    ));\n\n    if (completedStatusCheck) {\n      setAllCompleted(true);\n    }\n  }, [todos]);\n\n  const toggleAll = () => {\n    if (allCompleted) {\n      forToggleAll();\n      setAllCompleted(false);\n    }\n  };\n\n  return (\n    <>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={allCompleted}\n          onChange={toggleAll}\n        />\n        <label\n          htmlFor=\"toggle-all\"\n          title=\"Mark all as completed\"\n        >\n          Mark all as completed\n        </label>\n\n        <ul className=\"todo-list\">\n          {todos.map(todo => (\n            <TodoItem\n              todo={todo}\n              changeStatus={changeStatus}\n              key={todo.id}\n              deleteTodo={deleteTodo}\n              updateTodoItem={updateTodoItem}\n            />\n          ))}\n\n          {/* NEED TO DELETE SOME ELEMENTS UNDER THE COMMENT */}\n          {/* <li>\n            <div className=\"view\">\n              <input type=\"checkbox\" className=\"toggle\" />\n              <label>asdfghj</label>\n              <button type=\"button\" className=\"destroy\" />\n            </div>\n            <input type=\"text\" className=\"edit\" />\n          </li>\n\n          <li className=\"completed\">\n            <div className=\"view\">\n              <input type=\"checkbox\" className=\"toggle\" />\n              <label>qwertyuio</label>\n              <button type=\"button\" className=\"destroy\" />\n            </div>\n            <input type=\"text\" className=\"edit\" />\n          </li>\n\n          <li className=\"editing\">\n            <div className=\"view\">\n              <input type=\"checkbox\" className=\"toggle\" />\n              <label>zxcvbnm</label>\n              <button type=\"button\" className=\"destroy\" />\n            </div>\n            <input type=\"text\" className=\"edit\" />\n          </li>\n\n          <li>\n            <div className=\"view\">\n              <input type=\"checkbox\" className=\"toggle\" />\n              <label>1234567890</label>\n              <button type=\"button\" className=\"destroy\" />\n            </div>\n            <input type=\"text\" className=\"edit\" />\n          </li> */}\n\n          {/* NEED TO DELETE SOME ELEMENTS ABOVE THE COMMENT */}\n\n        </ul>\n      </section>\n    </>\n  );\n}\n\nTodoList.propTypes = {\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  forToggleAll: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isReuired,\n      title: PropTypes.string.isReuired,\n      completed: PropTypes.bool.isReuired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { TodoList } from './components/TodoList';\n\n// DELETE INITIAL TODO?\n// const initialTodos = [{\n//   completed: false, id: 'yqpsi41da', title: '1212123',\n// }, {\n//   completed: false, id: '3wonnlkkn', title: 'xcvnslk',\n// }, { completed: false, id: 'i0b54y3z9', title: '-9adsf0' },\n// ];\n\n// DEBOUNCE\n// const debounce = (f, delay) => {\n//   let timerId;\n\n//   return (...args) => {\n//     clearTimeout(timerId);\n//     timerId = setTimeout(f, delay, ...args);\n//   };\n// };\n\nfunction App() {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [filteredTodos, setfilteredTodos] = useState(todos);\n  const [filterStatus, setFilterStatus] = useState('');\n  const [activeSelectAll, setActiveSelectAll] = useState(false);\n\n  const addTodo = (value) => {\n    setTitle(value);\n  };\n\n  const onSubmit = (event) => {\n    if (title.length === 0) {\n      return;\n    }\n\n    event.preventDefault();\n\n    const newTodo = {\n      title,\n      id: Math.random().toString(36).substr(2, 9),\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n    setfilteredTodos([...todos, newTodo]);\n\n    setTitle('');\n  };\n\n  const toggleAll = () => {\n    const uncheckedTodos = todos.map(todo => (\n      {\n        ...todo,\n        completed: false,\n      }\n    ));\n\n    setTodos(uncheckedTodos);\n    setfilteredTodos(uncheckedTodos);\n  };\n\n  const changeStatus = (checkedTodoId) => {\n    const checkedTodo = todos.find(todo => (\n      todo.id === checkedTodoId\n    ));\n    const index = todos.indexOf(checkedTodo);\n    const todosCopy = [...todos];\n\n    checkedTodo.completed = !checkedTodo.completed;\n\n    todosCopy.splice(index, 1, checkedTodo);\n\n    setTodos(todosCopy);\n    setfilteredTodos(todosCopy);\n  };\n\n  useEffect(() => {\n    if (filterStatus === 'all' || filterStatus === '') {\n      setfilteredTodos(todos);\n    } else {\n      const filter = filterStatus === 'completed';\n\n      const filteredList = todos.filter(todo => (\n        todo.completed === filter\n      ));\n\n      setfilteredTodos(filteredList);\n    }\n  }, [filterStatus, todos]);\n\n  const deleteTodo = (todoIdForDelete) => {\n    const filteredList = todos.filter(todo => (\n      todo.id !== todoIdForDelete\n    ));\n\n    setTodos(filteredList);\n    setfilteredTodos(filteredList);\n  };\n\n  useEffect(() => {\n    if (!activeSelectAll) {\n      const checkStatus = todos.some(todo => (\n        todo.completed === true\n      ));\n\n      if (checkStatus) {\n        setActiveSelectAll(true);\n      }\n    } else {\n      const checkStatus = todos.every(todo => (\n        todo.completed === false\n      ));\n\n      if (checkStatus) {\n        setActiveSelectAll(false);\n      }\n    }\n  }, [todos, activeSelectAll]);\n\n  const clearAllCompleted = () => {\n    const fileredList = todos.filter(todo => (\n      todo.completed === false\n    ));\n\n    setTodos(fileredList);\n    setfilteredTodos(fileredList);\n\n    if (filterStatus === 'completed') {\n      setFilterStatus('all');\n    }\n  };\n\n  const updateTodoItem = (todoId, newTitle) => {\n    const todosCopy = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: newTitle,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(todosCopy);\n    setfilteredTodos(todosCopy);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={onSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={event => addTodo(event.target.value)}\n          />\n        </form>\n      </header>\n      {!!todos.length && (\n        <>\n          <TodoList\n            todos={filteredTodos}\n            changeStatus={changeStatus}\n            deleteTodo={deleteTodo}\n            forToggleAll={toggleAll}\n            updateTodoItem={updateTodoItem}\n          />\n\n          <footer className=\"footer\">\n            {filteredTodos.length !== 0 && (\n              <span className=\"todo-count\">\n                {`${filteredTodos.length} item(s) left`}\n              </span>\n            )}\n\n            <ul className=\"filters\">\n              <li>\n                <a\n                  href=\"#/\"\n                  className={classNames({ selected: filterStatus === 'all' })}\n                  onClick={() => setFilterStatus('all')}\n                >\n                  All\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/active\"\n                  className={classNames({\n                    selected: filterStatus === 'active',\n                  })}\n                  onClick={() => setFilterStatus('active')}\n                >\n                  Active\n                </a>\n              </li>\n\n              {activeSelectAll && (\n                <li>\n                  <a\n                    href=\"#/completed\"\n                    className={classNames({\n                      selected: filterStatus === 'completed',\n                    })}\n                    onClick={() => setFilterStatus('completed')}\n                  >\n                    Completed\n                  </a>\n                </li>\n              )}\n\n            </ul>\n\n            {activeSelectAll && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearAllCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n\n          </footer>\n        </>\n      )}\n\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}