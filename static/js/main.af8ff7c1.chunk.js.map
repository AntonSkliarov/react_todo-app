{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["TodoItem","todo","changeStatus","deleteTodo","useState","editingId","setEditingId","className","classNames","completed","editing","id","type","value","onClick","event","target","checked","onDoubleClick","title","TodoList","todos","forToggleAll","allCompleted","setAllCompleted","useEffect","every","htmlFor","map","key","App","setTitle","setTodos","filteredTodos","setfilteredTodos","filterStatus","setFilterStatus","activeSelectAll","setActiveSelectAll","filter","filteredList","some","onSubmit","preventDefault","newTodo","Math","random","toString","substr","placeholder","onChange","length","checkedTodoId","checkedTodo","find","index","indexOf","todosCopy","splice","todoIdForDelete","uncheckedTodos","href","selected","fileredList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af8ff7c1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport function TodoItem({ todo, changeStatus, deleteTodo }) {\n  const [editingId, setEditingId] = useState('');\n  // const [labelValue, setlabelValue] = useState('');\n\n  // const updateTodoTitle = () => {\n  // }\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed, editing: editingId === todo.id,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          value={todo.id}\n          onClick={event => changeStatus(event.target.value)}\n          checked={todo.completed}\n        />\n        <label\n          onDoubleClick={() => setEditingId(todo.id)}\n          // value={labelValue}\n          // onBlur={updateTodoTitle}\n        >\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport function TodoList({ todos, changeStatus, deleteTodo, forToggleAll }) {\n  const [allCompleted, setAllCompleted] = useState(false);\n\n  useEffect(() => {\n    const completedStatusCheck = todos.every(todo => (\n      todo.completed === true\n    ));\n\n    if (completedStatusCheck) {\n      setAllCompleted(true);\n    }\n  }, [todos]);\n\n  const toggleAll = () => {\n    if (allCompleted) {\n      forToggleAll();\n      setAllCompleted(false);\n    }\n  };\n\n  return (\n    <>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={allCompleted}\n          onClick={toggleAll}\n        />\n        <label\n          htmlFor=\"toggle-all\"\n          title=\"Mark all as completed\"\n        >\n          Mark all as completed\n        </label>\n\n        <ul className=\"todo-list\">\n          {todos.map(todo => (\n            <TodoItem\n              todo={todo}\n              changeStatus={changeStatus}\n              key={todo.id}\n              deleteTodo={deleteTodo}\n            />\n          ))}\n\n          {/* NEED TO DELETE SOME ELEMENTS UNDER THE COMMENT */}\n          {/* <li>\n            <div className=\"view\">\n              <input type=\"checkbox\" className=\"toggle\" />\n              <label>asdfghj</label>\n              <button type=\"button\" className=\"destroy\" />\n            </div>\n            <input type=\"text\" className=\"edit\" />\n          </li>\n\n          <li className=\"completed\">\n            <div className=\"view\">\n              <input type=\"checkbox\" className=\"toggle\" />\n              <label>qwertyuio</label>\n              <button type=\"button\" className=\"destroy\" />\n            </div>\n            <input type=\"text\" className=\"edit\" />\n          </li>\n\n          <li className=\"editing\">\n            <div className=\"view\">\n              <input type=\"checkbox\" className=\"toggle\" />\n              <label>zxcvbnm</label>\n              <button type=\"button\" className=\"destroy\" />\n            </div>\n            <input type=\"text\" className=\"edit\" />\n          </li>\n\n          <li>\n            <div className=\"view\">\n              <input type=\"checkbox\" className=\"toggle\" />\n              <label>1234567890</label>\n              <button type=\"button\" className=\"destroy\" />\n            </div>\n            <input type=\"text\" className=\"edit\" />\n          </li> */}\n\n          {/* NEED TO DELETE SOME ELEMENTS ABOVE THE COMMENT */}\n\n        </ul>\n      </section>\n    </>\n  );\n}\n\nTodoList.propTypes = {\n  changeStatus: PropTypes.func.isRequired,\n  forToggleAll: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isReuired,\n      title: PropTypes.string.isReuired,\n      completed: PropTypes.bool.isReuired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { TodoList } from './components/TodoList';\n\n// DELETE INITIAL TODO?\n// const initialTodos = [{\n//   completed: false, id: 'yqpsi41da', title: '1212123',\n// }, {\n//   completed: false, id: '3wonnlkkn', title: 'xcvnslk',\n// }, { completed: false, id: 'i0b54y3z9', title: '-9adsf0' },\n// ];\n\n// DEBOUNCE\n// const debounce = (f, delay) => {\n//   let timerId;\n\n//   return (...args) => {\n//     clearTimeout(timerId);\n//     timerId = setTimeout(f, delay, ...args);\n//   };\n// };\n\nfunction App() {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [filteredTodos, setfilteredTodos] = useState(todos);\n  const [filterStatus, setFilterStatus] = useState('');\n  const [activeSelectAll, setActiveSelectAll] = useState(false);\n\n  const addTodo = (value) => {\n    setTitle(value);\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    const newTodo = {\n      title,\n      id: Math.random().toString(36).substr(2, 9),\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n    setfilteredTodos([...todos, newTodo]);\n\n    setTitle('');\n  };\n\n  const toggleAll = () => {\n    const uncheckedTodos = todos.map(todo => (\n      {\n        ...todo,\n        completed: false,\n      }\n    ));\n\n    setTodos(uncheckedTodos);\n    setfilteredTodos(uncheckedTodos);\n  };\n\n  const changeStatus = (checkedTodoId) => {\n    const checkedTodo = todos.find(todo => (\n      todo.id === checkedTodoId\n    ));\n    const index = todos.indexOf(checkedTodo);\n    const todosCopy = [...todos];\n\n    checkedTodo.completed = !checkedTodo.completed;\n\n    todosCopy.splice(index, 1, checkedTodo);\n\n    setTodos(todosCopy);\n    setfilteredTodos(todosCopy);\n  };\n\n  useEffect(() => {\n    if (filterStatus === 'all' || filterStatus === '') {\n      setfilteredTodos(todos);\n    } else {\n      const filter = filterStatus === 'completed';\n\n      const filteredList = todos.filter(todo => (\n        todo.completed === filter\n      ));\n\n      setfilteredTodos(filteredList);\n    }\n  }, [filterStatus, todos]);\n\n  const deleteTodo = (todoIdForDelete) => {\n    const filteredList = todos.filter(todo => (\n      todo.id !== todoIdForDelete\n    ));\n\n    setTodos(filteredList);\n    setfilteredTodos(filteredList);\n  };\n\n  useEffect(() => {\n    if (!activeSelectAll) {\n      const checkStatus = todos.some(todo => (\n        todo.completed === true\n      ));\n\n      if (checkStatus) {\n        setActiveSelectAll(true);\n      }\n    } else {\n      const checkStatus = todos.every(todo => (\n        todo.completed === false\n      ));\n\n      if (checkStatus) {\n        setActiveSelectAll(false);\n      }\n    }\n  }, [todos]);\n\n  const clearAllCompleted = () => {\n    const fileredList = todos.filter(todo => (\n      todo.completed === false\n    ));\n\n    setTodos(fileredList);\n    setfilteredTodos(fileredList);\n\n    if (filterStatus === 'completed') {\n      setFilterStatus('all');\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={onSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={event => addTodo(event.target.value)}\n          />\n        </form>\n      </header>\n      {!!todos.length && (\n        <>\n          <TodoList\n            todos={filteredTodos}\n            changeStatus={changeStatus}\n            deleteTodo={deleteTodo}\n            forToggleAll={toggleAll}\n          />\n\n          <footer className=\"footer\">\n            {filteredTodos.length !== 0 && (\n              <span className=\"todo-count\">\n                {`${filteredTodos.length} item(s) left`}\n              </span>\n            )}\n\n            <ul className=\"filters\">\n              <li>\n                <a\n                  href=\"#/\"\n                  className={classNames({ selected: filterStatus === 'all' })}\n                  onClick={() => setFilterStatus('all')}\n                >\n                  All\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/active\"\n                  className={classNames({\n                    selected: filterStatus === 'active',\n                  })}\n                  onClick={() => setFilterStatus('active')}\n                >\n                  Active\n                </a>\n              </li>\n\n              {activeSelectAll && (\n                <li>\n                  <a\n                    href=\"#/completed\"\n                    className={classNames({\n                      selected: filterStatus === 'completed',\n                    })}\n                    onClick={() => setFilterStatus('completed')}\n                  >\n                    Completed\n                  </a>\n                </li>\n              )}\n\n            </ul>\n\n            {activeSelectAll && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearAllCompleted}\n              >\n                Clear completed\n              </button>\n            )}\n\n          </footer>\n        </>\n      )}\n\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}