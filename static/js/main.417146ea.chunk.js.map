{"version":3,"sources":["js/filtersNames.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/AddTodoForm/AddTodoForm.js","components/Filters/Filters.js","components/Footer/Footer.js","App.js","custom_hooks/useLocalStorage.js","index.js"],"names":["filtersNames","TodoItem","todo","changeStatus","deleteTodo","updateTodoItem","filterStatus","useState","editingMode","setEditingMode","title","newTitle","setNewTitle","completed","setCompleted","useEffect","className","classNames","editing","onDoubleClick","hidden","hiddenItem","type","value","id","onChange","event","target","handleChange","checked","onClick","onKeyDown","eventKey","todoId","length","handleKeyDown","key","onBlur","TodoList","todos","map","AddTodoForm","onSubmit","addTitle","placeholder","Filters","setFilterStatus","haveCompletedTodos","selected","Footer","clearAllCompleted","setHaveCompletedTodos","haveCompleted","some","App","setTitle","initialValue","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","useLocalStorage","setTodos","allCompleted","setAllCompleted","toggleAll","status","uncheckedTodos","every","useCallback","filteredList","filter","todosCopy","preventDefault","newTodo","uuidv4","htmlFor","checkedTodoId","todoIdForDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.417146ea.chunk.js","sourcesContent":["export const filtersNames = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { filtersNames } from '../../js/filtersNames';\n\nexport function TodoItem({\n  todo,\n  changeStatus,\n  deleteTodo,\n  updateTodoItem,\n  filterStatus,\n}) {\n  const [editingMode, setEditingMode] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n  const [completed, setCompleted] = useState(todo.completed);\n\n  useEffect(() => {\n    setEditingMode('');\n    setNewTitle(todo.title);\n  }, [todo]);\n\n  const updateTodoTitle = (title) => {\n    setNewTitle(title);\n  };\n\n  const handleKeyDown = (eventKey, todoId) => {\n    if (newTitle.length === 0) {\n      return;\n    }\n\n    switch (eventKey) {\n      case 'Enter':\n        updateTodoItem(todoId, newTitle);\n        break;\n      case 'Escape':\n        setEditingMode('');\n        setNewTitle(todo.title);\n        break;\n      default:\n    }\n  };\n\n  const hiddenItem = () => {\n    switch (filterStatus) {\n      case filtersNames.active:\n        return completed;\n      case filtersNames.completed:\n        return !completed;\n      default:\n        return false;\n    }\n  };\n\n  const handleChange = (event) => {\n    changeStatus(event.target.value);\n    setCompleted(!completed);\n  };\n\n  const handleBlur = (todoId) => {\n    updateTodoItem(todoId, newTitle);\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed,\n        editing: editingMode === true,\n      })}\n      onDoubleClick={() => setEditingMode(true)}\n      hidden={hiddenItem()}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          value={todo.id}\n          onChange={event => handleChange(event)}\n          checked={todo.completed}\n        />\n        <label>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={event => updateTodoTitle(event.target.value)}\n        onKeyDown={event => handleKeyDown(event.key, todo.id)}\n        onBlur={() => handleBlur(todo.id)}\n      />\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  filterStatus: PropTypes.string.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  todos,\n  changeStatus,\n  deleteTodo,\n  updateTodoItem,\n  filterStatus,\n}) => (\n  <>\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          filterStatus={filterStatus}\n          changeStatus={changeStatus}\n          key={todo.id}\n          deleteTodo={deleteTodo}\n          updateTodoItem={updateTodoItem}\n        />\n      ))}\n    </ul>\n  </>\n);\n\nTodoList.propTypes = {\n  filterStatus: PropTypes.string.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isReuired,\n      title: PropTypes.string.isReuired,\n      completed: PropTypes.bool.isReuired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddTodoForm = ({ title, onSubmit, addTitle }) => (\n  <form onSubmit={onSubmit}>\n    <input\n      type=\"text\"\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      value={title}\n      onChange={event => addTitle(event.target.value)}\n    />\n  </form>\n);\n\nAddTodoForm.propTypes = {\n  title: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  addTitle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { filtersNames } from '../../js/filtersNames';\n\nexport const Filters = ({\n  setFilterStatus,\n  filterStatus,\n  haveCompletedTodos,\n}) => (\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        className={classNames('filter', {\n          selected: filterStatus === filtersNames.all,\n        })}\n        onClick={() => setFilterStatus(filtersNames.all)}\n      >\n        All\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={classNames('filter', {\n          selected: filterStatus === filtersNames.active,\n        })}\n        onClick={() => setFilterStatus(filtersNames.active)}\n      >\n        Active\n      </button>\n    </li>\n\n    {haveCompletedTodos && (\n      <li>\n        <button\n          type=\"button\"\n          className={classNames('filter', {\n            selected: filterStatus === filtersNames.completed,\n          })}\n          onClick={() => setFilterStatus(filtersNames.completed)}\n        >\n          Completed\n        </button>\n      </li>\n    )}\n\n  </ul>\n);\n\nFilters.propTypes = {\n  setFilterStatus: PropTypes.func.isRequired,\n  haveCompletedTodos: PropTypes.bool.isRequired,\n  filterStatus: PropTypes.string.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Filters } from '../Filters';\n\nexport function Footer({\n  todos,\n  setFilterStatus,\n  filterStatus,\n  clearAllCompleted,\n}) {\n  const [haveCompletedTodos, setHaveCompletedTodos] = useState(false);\n\n  useEffect(() => {\n    const haveCompleted = todos.some(todo => (\n      todo.completed === true\n    ));\n\n    setHaveCompletedTodos(haveCompleted);\n  }, [todos]);\n\n  return (\n    <footer className=\"footer\">\n      {!!todos.length && (\n        <span className=\"todo-count\">\n          {`${todos.length} item(s) left`}\n        </span>\n      )}\n\n      <Filters\n        setFilterStatus={setFilterStatus}\n        filterStatus={filterStatus}\n        haveCompletedTodos={haveCompletedTodos}\n      />\n\n      {haveCompletedTodos && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clearAllCompleted}\n        >\n          Clear completed tasks\n        </button>\n      )}\n\n    </footer>\n  );\n}\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isReuired,\n      title: PropTypes.string.isReuired,\n      completed: PropTypes.bool.isReuired,\n    }).isRequired,\n  ).isRequired,\n  setFilterStatus: PropTypes.func.isRequired,\n  filterStatus: PropTypes.string.isRequired,\n  clearAllCompleted: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TodoList } from './components/TodoList';\nimport { useLocalStorage } from './custom_hooks/useLocalStorage';\nimport { AddTodoForm } from './components/AddTodoForm';\nimport { Footer } from './components/Footer';\n\nfunction App() {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [allCompleted, setAllCompleted] = useState(false);\n\n  const addTitle = (value) => {\n    setTitle(value);\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    if (title.length === 0) {\n      return;\n    }\n\n    const newTodo = {\n      title,\n      id: uuidv4(),\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n\n    setTitle('');\n  };\n\n  const toggleAll = (status) => {\n    const uncheckedTodos = todos.map(todo => (\n      {\n        ...todo,\n        completed: status,\n      }\n    ));\n\n    setAllCompleted(status);\n    setTodos(uncheckedTodos);\n  };\n\n  useEffect(() => {\n    if (todos.every(todo => todo.completed === true)) {\n      setAllCompleted(true);\n    }\n\n    if (todos.every(todo => todo.completed === false)) {\n      setAllCompleted(false);\n    }\n  }, [todos]);\n\n  const changeStatus = (checkedTodoId) => {\n    const todosCopy = todos.map((todo) => {\n      if (todo.id === checkedTodoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(todosCopy);\n  };\n\n  const deleteTodo = (todoIdForDelete) => {\n    const filteredList = todos.filter(todo => (\n      todo.id !== todoIdForDelete\n    ));\n\n    setTodos(filteredList);\n  };\n\n  const clearAllCompleted = useCallback(() => {\n    const filteredList = todos.filter(todo => (\n      todo.completed === false\n    ));\n\n    setTodos(filteredList);\n\n    if (filterStatus === 'completed') {\n      setFilterStatus('all');\n    }\n  }, [filterStatus, setTodos, todos]);\n\n  const updateTodoItem = useCallback((todoId, newTitle) => {\n    const todosCopy = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: newTitle,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(todosCopy);\n  }, [setTodos, todos]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <AddTodoForm\n          addTitle={addTitle}\n          onSubmit={onSubmit}\n          title={title}\n        />\n      </header>\n      {!!todos.length && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={allCompleted}\n              onChange={event => toggleAll(event.target.checked)}\n            />\n            <label\n              htmlFor=\"toggle-all\"\n              title=\"Mark all as completed/not completed\"\n            >\n              Mark all as completed/not completed\n            </label>\n\n            <TodoList\n              todos={todos}\n              filterStatus={filterStatus}\n              changeStatus={changeStatus}\n              deleteTodo={deleteTodo}\n              toggleAll={toggleAll}\n              updateTodoItem={updateTodoItem}\n            />\n          </section>\n\n          <Footer\n            todos={todos}\n            setFilterStatus={setFilterStatus}\n            filterStatus={filterStatus}\n            clearAllCompleted={clearAllCompleted}\n          />\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key)) || initialValue,\n  );\n  const save = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}