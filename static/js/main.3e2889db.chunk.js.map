{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/AddTodoForm/AddTodoForm.js","js/filtersNames.js","components/Filters/Filters.js","components/Footer/Footer.js","App.js","custom_hooks/useLocalStorage.js","index.js"],"names":["TodoItem","todo","changeStatus","deleteTodo","updateTodoItem","useState","editingMode","setEditingMode","title","newTitle","setNewTitle","useEffect","className","classNames","completed","editing","onDoubleClick","type","value","id","onChange","event","target","checked","onClick","onKeyDown","eventKey","key","todoId","length","onBlur","TodoList","todos","toggleAll","map","AddTodoForm","onSubmit","addTitle","placeholder","filtersNames","Filters","setFilterStatus","filterStatus","activeSelectAll","selected","Footer","filteredTodos","clearAllCompleted","App","setTitle","initialValue","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","useLocalStorage","setTodos","setfilteredTodos","setActiveSelectAll","allCompleted","setAllCompleted","status","uncheckedTodos","every","filter","filteredList","some","useCallback","todosCopy","preventDefault","newTodo","uuidv4","htmlFor","checkedTodoId","todoIdForDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e2889db.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport function TodoItem({\n  todo,\n  changeStatus,\n  deleteTodo,\n  updateTodoItem,\n}) {\n  const [editingMode, setEditingMode] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  useEffect(() => {\n    setEditingMode('');\n    setNewTitle(todo.title);\n  }, [todo]);\n\n  const updateTodoTitle = (title) => {\n    setNewTitle(title);\n  };\n\n  const titleChange = (eventKey, todoId) => {\n    if (newTitle.length === 0) {\n      return;\n    }\n\n    if (eventKey === 'Enter') {\n      updateTodoItem(todoId, newTitle);\n    }\n\n    if (eventKey === 'Escape') {\n      setEditingMode('');\n      setNewTitle(todo.title);\n    }\n  };\n\n  const onBlurTitleChange = (todoId) => {\n    updateTodoItem(todoId, newTitle);\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed,\n        editing: editingMode === true,\n      })}\n      onDoubleClick={() => setEditingMode(true)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          value={todo.id}\n          onChange={event => changeStatus(event.target.value)}\n          checked={todo.completed}\n        />\n        <label>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={event => updateTodoTitle(event.target.value)}\n        onKeyDown={event => titleChange(event.key, todo.id)}\n        onBlur={() => onBlurTitleChange(todo.id)}\n      />\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList = ({\n  todos,\n  changeStatus,\n  deleteTodo,\n  toggleAll,\n  updateTodoItem,\n}) => (\n  <>\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          changeStatus={changeStatus}\n          key={todo.id}\n          deleteTodo={deleteTodo}\n          updateTodoItem={updateTodoItem}\n        />\n      ))}\n    </ul>\n  </>\n);\n\nTodoList.propTypes = {\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  toggleAll: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isReuired,\n      title: PropTypes.string.isReuired,\n      completed: PropTypes.bool.isReuired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddTodoForm = ({ title, onSubmit, addTitle }) => (\n  <form onSubmit={onSubmit}>\n    <input\n      type=\"text\"\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      value={title}\n      onChange={event => addTitle(event.target.value)}\n    />\n  </form>\n);\n\nAddTodoForm.propTypes = {\n  title: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  addTitle: PropTypes.func.isRequired,\n};\n","export const filtersNames = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { filtersNames } from '../../js/filtersNames';\n\nexport const Filters = ({ setFilterStatus, filterStatus, activeSelectAll }) => (\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        className={classNames('filter', {\n          selected: filterStatus === filtersNames.all,\n        })}\n        onClick={() => setFilterStatus(filtersNames.all)}\n      >\n        All\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={classNames('filter', {\n          selected: filterStatus === filtersNames.active,\n        })}\n        onClick={() => setFilterStatus(filtersNames.active)}\n      >\n        Active\n      </button>\n    </li>\n\n    {activeSelectAll && (\n      <li>\n        <button\n          type=\"button\"\n          className={classNames('filter', {\n            selected: filterStatus === filtersNames.completed,\n          })}\n          onClick={() => setFilterStatus(filtersNames.completed)}\n        >\n          Completed\n        </button>\n      </li>\n    )}\n\n  </ul>\n);\n\nFilters.propTypes = {\n  setFilterStatus: PropTypes.func.isRequired,\n  activeSelectAll: PropTypes.bool.isRequired,\n  filterStatus: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Filters } from '../Filters';\n\nexport const Footer = ({\n  filteredTodos,\n  setFilterStatus,\n  filterStatus,\n  activeSelectAll,\n  clearAllCompleted,\n}) => (\n  <footer className=\"footer\">\n    {!!filteredTodos.length && (\n      <span className=\"todo-count\">\n        {`${filteredTodos.length} item(s) left`}\n      </span>\n    )}\n\n    <Filters\n      setFilterStatus={setFilterStatus}\n      filterStatus={filterStatus}\n      activeSelectAll={activeSelectAll}\n    />\n\n    {activeSelectAll && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearAllCompleted}\n      >\n        Clear completed tasks\n      </button>\n    )}\n\n  </footer>\n);\n\nFooter.propTypes = {\n  filteredTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isReuired,\n      title: PropTypes.string.isReuired,\n      completed: PropTypes.bool.isReuired,\n    }).isRequired,\n  ).isRequired,\n  setFilterStatus: PropTypes.func.isRequired,\n  filterStatus: PropTypes.string.isRequired,\n  activeSelectAll: PropTypes.bool.isRequired,\n  clearAllCompleted: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TodoList } from './components/TodoList';\nimport { useLocalStorage } from './custom_hooks/useLocalStorage';\nimport { AddTodoForm } from './components/AddTodoForm';\nimport { Footer } from './components/Footer';\n\nfunction App() {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [filteredTodos, setfilteredTodos] = useState(todos);\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [activeSelectAll, setActiveSelectAll] = useState(false);\n  const [allCompleted, setAllCompleted] = useState(false);\n\n  const addTitle = (value) => {\n    setTitle(value);\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    if (title.length === 0) {\n      return;\n    }\n\n    const newTodo = {\n      title,\n      id: uuidv4(),\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n    setfilteredTodos([...todos, newTodo]);\n\n    setTitle('');\n  };\n\n  const toggleAll = (status) => {\n    const uncheckedTodos = todos.map(todo => (\n      {\n        ...todo,\n        completed: status,\n      }\n    ));\n\n    setAllCompleted(status);\n    setTodos(uncheckedTodos);\n    setfilteredTodos(uncheckedTodos);\n  };\n\n  useEffect(() => {\n    if (todos.every(todo => todo.completed === true)) {\n      setAllCompleted(true);\n    }\n\n    if (todos.every(todo => todo.completed === false)) {\n      setAllCompleted(false);\n    }\n  }, [todos]);\n\n  const changeStatus = (checkedTodoId) => {\n    const todosCopy = todos.map((todo) => {\n      if (todo.id === checkedTodoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(todosCopy);\n    setfilteredTodos(todosCopy);\n  };\n\n  useEffect(() => {\n    if (filterStatus === 'all') {\n      setfilteredTodos(todos);\n    } else {\n      const filter = filterStatus === 'completed';\n\n      const filteredList = todos.filter(todo => (\n        todo.completed === filter\n      ));\n\n      setfilteredTodos(filteredList);\n    }\n  }, [filterStatus, todos]);\n\n  const deleteTodo = (todoIdForDelete) => {\n    const filteredList = todos.filter(todo => (\n      todo.id !== todoIdForDelete\n    ));\n\n    setTodos(filteredList);\n    setfilteredTodos(filteredList);\n  };\n\n  useEffect(() => {\n    if (!activeSelectAll) {\n      const checkStatus = todos.some(todo => (\n        todo.completed === true\n      ));\n\n      if (checkStatus) {\n        setActiveSelectAll(true);\n      }\n    } else {\n      const checkStatus = todos.every(todo => (\n        todo.completed === false\n      ));\n\n      if (checkStatus) {\n        setActiveSelectAll(false);\n      }\n    }\n  }, [todos, activeSelectAll]);\n\n  const clearAllCompleted = useCallback(() => {\n    const filteredList = todos.filter(todo => (\n      todo.completed === false\n    ));\n\n    setTodos(filteredList);\n    setfilteredTodos(filteredList);\n\n    if (filterStatus === 'completed') {\n      setFilterStatus('all');\n    }\n  }, [filterStatus, setTodos, todos]);\n\n  const updateTodoItem = useCallback((todoId, newTitle) => {\n    const todosCopy = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: newTitle,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(todosCopy);\n    setfilteredTodos(todosCopy);\n  }, [setTodos, todos]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <AddTodoForm\n          addTitle={addTitle}\n          onSubmit={onSubmit}\n          title={title}\n        />\n      </header>\n      {!!todos.length && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={allCompleted}\n              onChange={event => toggleAll(event.target.checked)}\n            />\n            <label\n              htmlFor=\"toggle-all\"\n              title=\"Mark all as completed/not completed\"\n            >\n              Mark all as completed/not completed\n            </label>\n\n            <TodoList\n              todos={filteredTodos}\n              changeStatus={changeStatus}\n              deleteTodo={deleteTodo}\n              toggleAll={toggleAll}\n              updateTodoItem={updateTodoItem}\n            />\n          </section>\n\n          <Footer\n            filteredTodos={filteredTodos}\n            setFilterStatus={setFilterStatus}\n            filterStatus={filterStatus}\n            activeSelectAll={activeSelectAll}\n            clearAllCompleted={clearAllCompleted}\n          />\n        </>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key)) || initialValue,\n  );\n  const save = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}