{"version":3,"sources":["components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/Filters/Filters.js","App.js","index.js"],"names":["TodoItem","todo","changeStatus","deleteTodo","updateTodoItem","useState","editingId","setEditingId","title","newTitle","setNewTitle","useEffect","className","classNames","completed","editing","id","onDoubleClick","type","value","onChange","event","target","checked","onClick","onKeyDown","eventKey","key","todoId","length","onBlur","TodoList","todos","forToggleAll","allCompleted","setAllCompleted","every","htmlFor","map","Filters","setFilterStatus","filterStatus","activeSelectAll","selected","App","setTitle","initialValue","JSON","parse","localStorage","getItem","setValue","newValue","setItem","stringify","useLocalStorage","setTodos","filteredTodos","setfilteredTodos","setActiveSelectAll","filter","filteredList","some","onSubmit","preventDefault","newTodo","uuidv4","placeholder","checkedTodoId","todosCopy","todoIdForDelete","uncheckedTodos","fileredList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53688002.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport function TodoItem({ todo, changeStatus, deleteTodo, updateTodoItem }) {\n  const [editingId, setEditingId] = useState('');\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  useEffect(() => {\n    setEditingId('');\n    setNewTitle(todo.title);\n  }, [todo]);\n\n  const updateTodoTitle = (title) => {\n    setNewTitle(title);\n  };\n\n  const titleChange = (eventKey, todoId) => {\n    if (newTitle.length === 0) {\n      return;\n    }\n\n    if (eventKey === 'Enter') {\n      updateTodoItem(todoId, newTitle);\n    }\n\n    if (eventKey === 'Escape') {\n      setEditingId('');\n      setNewTitle(todo.title);\n    }\n  };\n\n  const onBlurTitleChange = (todoId) => {\n    updateTodoItem(todoId, newTitle);\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed, editing: editingId === todo.id,\n      })}\n      onDoubleClick={() => setEditingId(todo.id)}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          value={todo.id}\n          onChange={event => changeStatus(event.target.value)}\n          checked={todo.completed}\n        />\n        <label>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={event => updateTodoTitle(event.target.value)}\n        onKeyDown={event => titleChange(event.key, todo.id)}\n        onBlur={() => onBlurTitleChange(todo.id)}\n      />\n    </li>\n  );\n}\n\nTodoItem.propTypes = {\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem';\n\nexport function TodoList({\n  todos,\n  changeStatus,\n  deleteTodo,\n  forToggleAll,\n  updateTodoItem,\n}) {\n  const [allCompleted, setAllCompleted] = useState(false);\n\n  useEffect(() => {\n    const completedStatusCheck = todos.every(todo => (\n      todo.completed === true\n    ));\n\n    if (completedStatusCheck) {\n      setAllCompleted(true);\n    }\n  }, [todos]);\n\n  const toggleAll = () => {\n    if (allCompleted) {\n      forToggleAll();\n      setAllCompleted(false);\n    }\n  };\n\n  return (\n    <>\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={allCompleted}\n          onChange={toggleAll}\n        />\n        <label\n          htmlFor=\"toggle-all\"\n          title=\"Mark all as completed\"\n        >\n          Mark all as completed\n        </label>\n\n        <ul className=\"todo-list\">\n          {todos.map(todo => (\n            <TodoItem\n              todo={todo}\n              changeStatus={changeStatus}\n              key={todo.id}\n              deleteTodo={deleteTodo}\n              updateTodoItem={updateTodoItem}\n            />\n          ))}\n\n        </ul>\n      </section>\n    </>\n  );\n}\n\nTodoList.propTypes = {\n  changeStatus: PropTypes.func.isRequired,\n  updateTodoItem: PropTypes.func.isRequired,\n  forToggleAll: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isReuired,\n      title: PropTypes.string.isReuired,\n      completed: PropTypes.bool.isReuired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const Filters = ({ setFilterStatus, filterStatus, activeSelectAll }) => (\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        className={classNames('filter', {\n          selected: filterStatus === 'all',\n        })}\n        onClick={() => setFilterStatus('all')}\n      >\n        All\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        className={classNames('filter', {\n          selected: filterStatus === 'active',\n        })}\n        onClick={() => setFilterStatus('active')}\n      >\n        Active\n      </button>\n    </li>\n\n    {activeSelectAll && (\n      <li>\n        <button\n          type=\"button\"\n          className={classNames('filter', {\n            selected: filterStatus === 'completed',\n          })}\n          onClick={() => setFilterStatus('completed')}\n        >\n          Completed\n        </button>\n      </li>\n    )}\n\n  </ul>\n);\n\nFilters.propTypes = {\n  setFilterStatus: PropTypes.func.isRequired,\n  activeSelectAll: PropTypes.bool.isRequired,\n  filterStatus: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TodoList } from './components/TodoList';\nimport { Filters } from './components/Filters';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(\n    JSON.parse(localStorage.getItem(key)) || initialValue,\n  );\n  const save = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n\nfunction App() {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [filteredTodos, setfilteredTodos] = useState(todos);\n  const [filterStatus, setFilterStatus] = useState('');\n  const [activeSelectAll, setActiveSelectAll] = useState(false);\n\n  const addTodo = (value) => {\n    setTitle(value);\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    if (title.length === 0) {\n      return;\n    }\n\n    const newTodo = {\n      title,\n      id: uuidv4(),\n      completed: false,\n    };\n\n    setTodos([...todos, newTodo]);\n    setfilteredTodos([...todos, newTodo]);\n\n    setTitle('');\n  };\n\n  const toggleAll = () => {\n    const uncheckedTodos = todos.map(todo => (\n      {\n        ...todo,\n        completed: false,\n      }\n    ));\n\n    setTodos(uncheckedTodos);\n    setfilteredTodos(uncheckedTodos);\n  };\n\n  const changeStatus = (checkedTodoId) => {\n    const todosCopy = todos.map((todo) => {\n      if (todo.id === checkedTodoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(todosCopy);\n    setfilteredTodos(todosCopy);\n  };\n\n  useEffect(() => {\n    if (filterStatus === 'all' || filterStatus === '') {\n      setfilteredTodos(todos);\n    } else {\n      const filter = filterStatus === 'completed';\n\n      const filteredList = todos.filter(todo => (\n        todo.completed === filter\n      ));\n\n      setfilteredTodos(filteredList);\n    }\n  }, [filterStatus, todos]);\n\n  const deleteTodo = (todoIdForDelete) => {\n    const filteredList = todos.filter(todo => (\n      todo.id !== todoIdForDelete\n    ));\n\n    setTodos(filteredList);\n    setfilteredTodos(filteredList);\n  };\n\n  useEffect(() => {\n    if (!activeSelectAll) {\n      const checkStatus = todos.some(todo => (\n        todo.completed === true\n      ));\n\n      if (checkStatus) {\n        setActiveSelectAll(true);\n      }\n    } else {\n      const checkStatus = todos.every(todo => (\n        todo.completed === false\n      ));\n\n      if (checkStatus) {\n        setActiveSelectAll(false);\n      }\n    }\n  }, [todos, activeSelectAll]);\n\n  const clearAllCompleted = () => {\n    const fileredList = todos.filter(todo => (\n      todo.completed === false\n    ));\n\n    setTodos(fileredList);\n    setfilteredTodos(fileredList);\n\n    if (filterStatus === 'completed') {\n      setFilterStatus('all');\n    }\n  };\n\n  const updateTodoItem = (todoId, newTitle) => {\n    const todosCopy = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: newTitle,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(todosCopy);\n    setfilteredTodos(todosCopy);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={onSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={event => addTodo(event.target.value)}\n          />\n        </form>\n      </header>\n      {!!todos.length && (\n        <>\n          <TodoList\n            todos={filteredTodos}\n            changeStatus={changeStatus}\n            deleteTodo={deleteTodo}\n            forToggleAll={toggleAll}\n            updateTodoItem={updateTodoItem}\n          />\n\n          <footer className=\"footer\">\n            {filteredTodos.length !== 0 && (\n              <span className=\"todo-count\">\n                {`${filteredTodos.length} item(s) left`}\n              </span>\n            )}\n\n            <Filters\n              setFilterStatus={setFilterStatus}\n              filterStatus={filterStatus}\n              activeSelectAll={activeSelectAll}\n            />\n\n            {activeSelectAll && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={clearAllCompleted}\n              >\n                Clear completed tasks\n              </button>\n            )}\n\n          </footer>\n        </>\n      )}\n\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}